// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/errorcode": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get All Error Code\n1001: internal server error\n1002: data not found\n1003: invalid params\n1004: no auth\n1005: invalid blockchain sign data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Error Code"
                ],
                "summary": "Get All Error Code",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ResponseVO"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/router.GetAllErrorCodeResp"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "wallet address",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.LoginReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ResponseVO"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/user.LoginResp"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/healthy": {
            "get": {
                "description": "Healthy",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Healthy",
                "parameters": [
                    {
                        "type": "string",
                        "description": "wallet address",
                        "name": "wallet_address",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code 1003: invalid params",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ResponseVO"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/user.HealthyResp"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/info": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "GetInfo",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "GetInfo",
                "responses": {
                    "200": {
                        "description": "code 1001: internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ResponseVO"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/user.GetInfoResp"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/login/nonce": {
            "get": {
                "description": "Get login nonce",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get login nonce",
                "parameters": [
                    {
                        "type": "string",
                        "description": "wallet address",
                        "name": "wallet_address",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code 1003: invalid params",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ResponseVO"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/user.NonceResp"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/nonce": {
            "get": {
                "description": "Get nonce",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get nonce",
                "parameters": [
                    {
                        "type": "string",
                        "description": "wallet address",
                        "name": "wallet_address",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code 1003: invalid params",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ResponseVO"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/user.NonceResp"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "description": "Register",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Register",
                "parameters": [
                    {
                        "description": "wallet address and sign data",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.RegisterReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code 1001: internal server error, code 1003: invalid params code 1005: invalid sign",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ResponseVO"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/utils.StatusVO"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "router.GetAllErrorCodeResp": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "user.GetInfoResp": {
            "type": "object",
            "properties": {
                "is_admin": {
                    "type": "boolean"
                },
                "wallet_address": {
                    "type": "string"
                }
            }
        },
        "user.HealthyResp": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "user.LoginReq": {
            "type": "object",
            "properties": {
                "sign_data": {
                    "type": "string"
                },
                "wallet_address": {
                    "type": "string"
                }
            }
        },
        "user.LoginResp": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "expire": {
                    "description": "\"2023-10-23T19:38:35+08:00\"",
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "user.NonceResp": {
            "type": "object",
            "properties": {
                "nonce": {
                    "type": "string"
                }
            }
        },
        "user.RegisterReq": {
            "type": "object",
            "required": [
                "sign_data",
                "wallet_address"
            ],
            "properties": {
                "sign_data": {
                    "type": "string"
                },
                "wallet_address": {
                    "type": "string"
                }
            }
        },
        "utils.ResponseVO": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {}
            }
        },
        "utils.StatusVO": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "v1",
	Host:             "localhost:4000",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Frame API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
