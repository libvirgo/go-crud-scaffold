// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"frame/ent/user"
	"frame/ent/useractivity"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserActivityCreate is the builder for creating a UserActivity entity.
type UserActivityCreate struct {
	config
	mutation *UserActivityMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (uac *UserActivityCreate) SetCreateTime(t time.Time) *UserActivityCreate {
	uac.mutation.SetCreateTime(t)
	return uac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (uac *UserActivityCreate) SetNillableCreateTime(t *time.Time) *UserActivityCreate {
	if t != nil {
		uac.SetCreateTime(*t)
	}
	return uac
}

// SetUpdateTime sets the "update_time" field.
func (uac *UserActivityCreate) SetUpdateTime(t time.Time) *UserActivityCreate {
	uac.mutation.SetUpdateTime(t)
	return uac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (uac *UserActivityCreate) SetNillableUpdateTime(t *time.Time) *UserActivityCreate {
	if t != nil {
		uac.SetUpdateTime(*t)
	}
	return uac
}

// SetType sets the "type" field.
func (uac *UserActivityCreate) SetType(i int) *UserActivityCreate {
	uac.mutation.SetType(i)
	return uac
}

// SetUserID sets the "user" edge to the User entity by ID.
func (uac *UserActivityCreate) SetUserID(id int) *UserActivityCreate {
	uac.mutation.SetUserID(id)
	return uac
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (uac *UserActivityCreate) SetNillableUserID(id *int) *UserActivityCreate {
	if id != nil {
		uac = uac.SetUserID(*id)
	}
	return uac
}

// SetUser sets the "user" edge to the User entity.
func (uac *UserActivityCreate) SetUser(u *User) *UserActivityCreate {
	return uac.SetUserID(u.ID)
}

// Mutation returns the UserActivityMutation object of the builder.
func (uac *UserActivityCreate) Mutation() *UserActivityMutation {
	return uac.mutation
}

// Save creates the UserActivity in the database.
func (uac *UserActivityCreate) Save(ctx context.Context) (*UserActivity, error) {
	uac.defaults()
	return withHooks(ctx, uac.sqlSave, uac.mutation, uac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uac *UserActivityCreate) SaveX(ctx context.Context) *UserActivity {
	v, err := uac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uac *UserActivityCreate) Exec(ctx context.Context) error {
	_, err := uac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uac *UserActivityCreate) ExecX(ctx context.Context) {
	if err := uac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uac *UserActivityCreate) defaults() {
	if _, ok := uac.mutation.CreateTime(); !ok {
		v := useractivity.DefaultCreateTime()
		uac.mutation.SetCreateTime(v)
	}
	if _, ok := uac.mutation.UpdateTime(); !ok {
		v := useractivity.DefaultUpdateTime()
		uac.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uac *UserActivityCreate) check() error {
	if _, ok := uac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "UserActivity.create_time"`)}
	}
	if _, ok := uac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "UserActivity.update_time"`)}
	}
	if _, ok := uac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "UserActivity.type"`)}
	}
	return nil
}

func (uac *UserActivityCreate) sqlSave(ctx context.Context) (*UserActivity, error) {
	if err := uac.check(); err != nil {
		return nil, err
	}
	_node, _spec := uac.createSpec()
	if err := sqlgraph.CreateNode(ctx, uac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uac.mutation.id = &_node.ID
	uac.mutation.done = true
	return _node, nil
}

func (uac *UserActivityCreate) createSpec() (*UserActivity, *sqlgraph.CreateSpec) {
	var (
		_node = &UserActivity{config: uac.config}
		_spec = sqlgraph.NewCreateSpec(useractivity.Table, sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeInt))
	)
	if value, ok := uac.mutation.CreateTime(); ok {
		_spec.SetField(useractivity.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := uac.mutation.UpdateTime(); ok {
		_spec.SetField(useractivity.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := uac.mutation.GetType(); ok {
		_spec.SetField(useractivity.FieldType, field.TypeInt, value)
		_node.Type = value
	}
	if nodes := uac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useractivity.UserTable,
			Columns: []string{useractivity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_user_activity = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserActivityCreateBulk is the builder for creating many UserActivity entities in bulk.
type UserActivityCreateBulk struct {
	config
	err      error
	builders []*UserActivityCreate
}

// Save creates the UserActivity entities in the database.
func (uacb *UserActivityCreateBulk) Save(ctx context.Context) ([]*UserActivity, error) {
	if uacb.err != nil {
		return nil, uacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uacb.builders))
	nodes := make([]*UserActivity, len(uacb.builders))
	mutators := make([]Mutator, len(uacb.builders))
	for i := range uacb.builders {
		func(i int, root context.Context) {
			builder := uacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserActivityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uacb *UserActivityCreateBulk) SaveX(ctx context.Context) []*UserActivity {
	v, err := uacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uacb *UserActivityCreateBulk) Exec(ctx context.Context) error {
	_, err := uacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uacb *UserActivityCreateBulk) ExecX(ctx context.Context) {
	if err := uacb.Exec(ctx); err != nil {
		panic(err)
	}
}
