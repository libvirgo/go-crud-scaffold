// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"frame/ent/predicate"
	"frame/ent/user"
	"frame/ent/useractivity"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserActivityUpdate is the builder for updating UserActivity entities.
type UserActivityUpdate struct {
	config
	hooks    []Hook
	mutation *UserActivityMutation
}

// Where appends a list predicates to the UserActivityUpdate builder.
func (uau *UserActivityUpdate) Where(ps ...predicate.UserActivity) *UserActivityUpdate {
	uau.mutation.Where(ps...)
	return uau
}

// SetUpdateTime sets the "update_time" field.
func (uau *UserActivityUpdate) SetUpdateTime(t time.Time) *UserActivityUpdate {
	uau.mutation.SetUpdateTime(t)
	return uau
}

// SetType sets the "type" field.
func (uau *UserActivityUpdate) SetType(i int) *UserActivityUpdate {
	uau.mutation.ResetType()
	uau.mutation.SetType(i)
	return uau
}

// AddType adds i to the "type" field.
func (uau *UserActivityUpdate) AddType(i int) *UserActivityUpdate {
	uau.mutation.AddType(i)
	return uau
}

// SetUserID sets the "user" edge to the User entity by ID.
func (uau *UserActivityUpdate) SetUserID(id int) *UserActivityUpdate {
	uau.mutation.SetUserID(id)
	return uau
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (uau *UserActivityUpdate) SetNillableUserID(id *int) *UserActivityUpdate {
	if id != nil {
		uau = uau.SetUserID(*id)
	}
	return uau
}

// SetUser sets the "user" edge to the User entity.
func (uau *UserActivityUpdate) SetUser(u *User) *UserActivityUpdate {
	return uau.SetUserID(u.ID)
}

// Mutation returns the UserActivityMutation object of the builder.
func (uau *UserActivityUpdate) Mutation() *UserActivityMutation {
	return uau.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uau *UserActivityUpdate) ClearUser() *UserActivityUpdate {
	uau.mutation.ClearUser()
	return uau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uau *UserActivityUpdate) Save(ctx context.Context) (int, error) {
	uau.defaults()
	return withHooks(ctx, uau.sqlSave, uau.mutation, uau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uau *UserActivityUpdate) SaveX(ctx context.Context) int {
	affected, err := uau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uau *UserActivityUpdate) Exec(ctx context.Context) error {
	_, err := uau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uau *UserActivityUpdate) ExecX(ctx context.Context) {
	if err := uau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uau *UserActivityUpdate) defaults() {
	if _, ok := uau.mutation.UpdateTime(); !ok {
		v := useractivity.UpdateDefaultUpdateTime()
		uau.mutation.SetUpdateTime(v)
	}
}

func (uau *UserActivityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(useractivity.Table, useractivity.Columns, sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeInt))
	if ps := uau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uau.mutation.UpdateTime(); ok {
		_spec.SetField(useractivity.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := uau.mutation.GetType(); ok {
		_spec.SetField(useractivity.FieldType, field.TypeInt, value)
	}
	if value, ok := uau.mutation.AddedType(); ok {
		_spec.AddField(useractivity.FieldType, field.TypeInt, value)
	}
	if uau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useractivity.UserTable,
			Columns: []string{useractivity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useractivity.UserTable,
			Columns: []string{useractivity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useractivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uau.mutation.done = true
	return n, nil
}

// UserActivityUpdateOne is the builder for updating a single UserActivity entity.
type UserActivityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserActivityMutation
}

// SetUpdateTime sets the "update_time" field.
func (uauo *UserActivityUpdateOne) SetUpdateTime(t time.Time) *UserActivityUpdateOne {
	uauo.mutation.SetUpdateTime(t)
	return uauo
}

// SetType sets the "type" field.
func (uauo *UserActivityUpdateOne) SetType(i int) *UserActivityUpdateOne {
	uauo.mutation.ResetType()
	uauo.mutation.SetType(i)
	return uauo
}

// AddType adds i to the "type" field.
func (uauo *UserActivityUpdateOne) AddType(i int) *UserActivityUpdateOne {
	uauo.mutation.AddType(i)
	return uauo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (uauo *UserActivityUpdateOne) SetUserID(id int) *UserActivityUpdateOne {
	uauo.mutation.SetUserID(id)
	return uauo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (uauo *UserActivityUpdateOne) SetNillableUserID(id *int) *UserActivityUpdateOne {
	if id != nil {
		uauo = uauo.SetUserID(*id)
	}
	return uauo
}

// SetUser sets the "user" edge to the User entity.
func (uauo *UserActivityUpdateOne) SetUser(u *User) *UserActivityUpdateOne {
	return uauo.SetUserID(u.ID)
}

// Mutation returns the UserActivityMutation object of the builder.
func (uauo *UserActivityUpdateOne) Mutation() *UserActivityMutation {
	return uauo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uauo *UserActivityUpdateOne) ClearUser() *UserActivityUpdateOne {
	uauo.mutation.ClearUser()
	return uauo
}

// Where appends a list predicates to the UserActivityUpdate builder.
func (uauo *UserActivityUpdateOne) Where(ps ...predicate.UserActivity) *UserActivityUpdateOne {
	uauo.mutation.Where(ps...)
	return uauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uauo *UserActivityUpdateOne) Select(field string, fields ...string) *UserActivityUpdateOne {
	uauo.fields = append([]string{field}, fields...)
	return uauo
}

// Save executes the query and returns the updated UserActivity entity.
func (uauo *UserActivityUpdateOne) Save(ctx context.Context) (*UserActivity, error) {
	uauo.defaults()
	return withHooks(ctx, uauo.sqlSave, uauo.mutation, uauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uauo *UserActivityUpdateOne) SaveX(ctx context.Context) *UserActivity {
	node, err := uauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uauo *UserActivityUpdateOne) Exec(ctx context.Context) error {
	_, err := uauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uauo *UserActivityUpdateOne) ExecX(ctx context.Context) {
	if err := uauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uauo *UserActivityUpdateOne) defaults() {
	if _, ok := uauo.mutation.UpdateTime(); !ok {
		v := useractivity.UpdateDefaultUpdateTime()
		uauo.mutation.SetUpdateTime(v)
	}
}

func (uauo *UserActivityUpdateOne) sqlSave(ctx context.Context) (_node *UserActivity, err error) {
	_spec := sqlgraph.NewUpdateSpec(useractivity.Table, useractivity.Columns, sqlgraph.NewFieldSpec(useractivity.FieldID, field.TypeInt))
	id, ok := uauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserActivity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, useractivity.FieldID)
		for _, f := range fields {
			if !useractivity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != useractivity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uauo.mutation.UpdateTime(); ok {
		_spec.SetField(useractivity.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := uauo.mutation.GetType(); ok {
		_spec.SetField(useractivity.FieldType, field.TypeInt, value)
	}
	if value, ok := uauo.mutation.AddedType(); ok {
		_spec.AddField(useractivity.FieldType, field.TypeInt, value)
	}
	if uauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useractivity.UserTable,
			Columns: []string{useractivity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useractivity.UserTable,
			Columns: []string{useractivity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserActivity{config: uauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useractivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uauo.mutation.done = true
	return _node, nil
}
